// package Лекции;


// import java.util.LinkedList;
// import java.util.PriorityQueue;
// import java.util.Queue;
// import java.util.Stack;

// public class Lesson4 {
//     //public static void main(String[] args) {
//         //LinkedList Представляет собой двусвязный список.
// /*Стек (stack) и куча (heap) - это две основные области памяти, используемые в программировании.

// Стек - это участок памяти, который используется для хранения локальных переменных и вызовов функций. 
// Каждый раз, когда вызывается функция, в стеке создается новый фрейм, содержащий параметры функции, локальные переменные и адрес возврата. 
// При завершении функции фрейм удаляется из стека. Стек работает по принципу "последним пришел - первым вышел" (Last-In-First-Out, LIFO).

// Куча - это область памяти, используемая для динамического выделения памяти во время выполнения программы. 
// В куче хранятся объекты и данные, которые необходимы на протяжении всего времени выполнения программы. 
// Выделение и освобождение памяти в куче происходит в произвольном порядке.

// Стек и куча имеют различные характеристики и применяются для разных целей. 
// Стек предоставляет быстрый доступ к данным, но имеет ограниченный размер. 
// Куча позволяет выделять и освобождать память по мере необходимости, но доступ к данным в куче может быть медленнее. */

//         /*Первый элемент знает где находится второй и т.д. из 1 во 2, в 3 из 2, постепенно
//          * поэтому списки не очень эффективны
//          */

// /*
//  * 
//  * Если информация о текущем в следующем это односвязный список
//  * если о следующем в предыдущем то двухсвязный список
//  * если в односвязно после последнего первый то циклический
//  * если в двух после последнего инфа в первом и в первом инфа про последний это
//  * двуноправленный связный список
//  */

//     //     LinkedList<String> ll = new LinkedList<String>();

//     //     ll.add("1");
//     //     ll.add("2");
//     //     ll.add("3");
//     //     System.out.println(ll);

//     //     Queue<String> queue = new LinkedList<String>();
//     //     int item = queue.remove();
//     // }


//     public static void main(String[] args) {
//         // PriorityQueue<String> pq = new PriorityQueue<String>();
//         // pq.add("123");
//         // pq.add("3");
//         // pq.add("2");
//         // System.out.println(pq);
//         // System.out.println(pq.poll());

//         //Deque<Integer> 

//         //Stack Инфиксная постфиксная записи
//         //123*+  1+2*3
//         //12+3*  (1+2)*33
//         var exp = "1 2 3 * +".split(" ");
//         int res = 0;
//         System.out.println(exp);

//         Stack<Integer> st = new Stack<>();
//         for (int i = 0; i < exp.length; i++){

//             if(isDigit(exp[i])){
//                 st.push(Integer.parseInt(exp[i]));
//             } else{
//                 switch (exp) {
//                     case "+":
//                         res = st.pop() + st.pop();
//                         st.push(res);
//                         break;
//                     case "-":
//                         res = st.pop() - st.pop();
//                         st.push(res);
//                         break;
//                     case "*":
//                         res = st.pop() * st.pop();
//                         st.push(res);
//                         break;
//                     case "/":
//                         res = st.pop() / st.pop();
//                         st.push(res);
//                         break;
//                     default:
//                         break;
//                 }
//             }
//         }
//     }

    

// }
